#include <iostream>
using namespace std;

class person{
  public:
  string *nameptr;
  int *ageptr;
  
  person(string name, int age){
      nameptr = new string;
      *nameptr = name;
      ageptr = new int;
      *ageptr = age;
      cout<<"Person class parameterized constructor called"<<endl;
  }
  
  person(person &obj){
      nameptr = new string;
      *nameptr = *obj.nameptr;
      ageptr = new int;
      *ageptr = *obj.ageptr;
      cout<<"Person class copy constructor called"<<endl;
  }
  
  
  ~person(){
      delete nameptr;
      delete ageptr;
      cout<<"Person class destructor called"<<endl;
  }
};

class student{
    public:
    double *rollnoptr;
    
    student(double rollno){
        rollnoptr = new double;
        *rollnoptr = rollno;
        cout<<"Student class parameterized constructor called"<<endl;
    }
    
    student(student &obj){
        rollnoptr = new double;
        *rollnoptr = *obj.rollnoptr;
        cout<<"Student class copy constructor called"<<endl;
    }
    
    ~student(){
        delete rollnoptr;
        cout<<"Student class destructor called"<<endl;
    }
};

class teacher{
    public:
    double *salaryptr;
    
    teacher(double salary){
        salaryptr = new double;
        *salaryptr = salary;
        cout<<"Teacher class parameterized constructor called"<<endl;
    }
    
    teacher(teacher &obj){
        salaryptr = new double;
        *salaryptr = *obj.salaryptr;
        cout<<"Teacher class copy constructor called"<<endl;
    }
    
    ~teacher(){
        delete salaryptr;
        cout<<"Teacher class destructor called"<<endl;
    }
};

class gradstudent : public person, public student{
    public:
      string *ResearchAreaptr;
      
      gradstudent(string name, int age, double rollno, string ResearchArea) : person(name, age), student(rollno){
          ResearchAreaptr = new string;
          *ResearchAreaptr = ResearchArea;
          cout<<"Gradstudent class parameterized constructor called"<<endl;
      }
      
      gradstudent(gradstudent &obj) : person(obj), student(obj){
          ResearchAreaptr = new string;
          *ResearchAreaptr = *obj.ResearchAreaptr;
          cout<<"Gradstudent class copy constructor called"<<endl;
      }
      
      ~gradstudent(){
          delete ResearchAreaptr;
          cout<<"Gradstudent class destructor called"<<endl;
      }
      
      void getInfo(){
          cout<<"Name : "<<*nameptr<<endl;
          cout<<"Age : "<<*ageptr<<" Years"<<endl;
          cout<<"Roll No : "<<*rollnoptr<<endl;
          cout<<"Research Area : "<<*ResearchAreaptr<<endl;
      }
};

class TA : public person, public teacher{
      public:
      string *ResearchAreaptr;
      
      TA(string name, int age, double salary,string ResearchArea) : teacher(salary), person(name, age){
          ResearchAreaptr = new string;
          *ResearchAreaptr = ResearchArea;
          cout<<"TA class parameterized constructor called"<<endl;
      }
      
      TA(TA &obj) : teacher(obj),person(obj){
          ResearchAreaptr = new string;
          *ResearchAreaptr = *obj.ResearchAreaptr;
          cout<<"TA class copy constructor called"<<endl;
      }
      
      ~TA(){
          delete ResearchAreaptr;
          
          cout<<"TA class destructor called"<<endl;
      }
      
        void getInfo(){
          cout<<"Name : "<<*nameptr<<endl;
          cout<<"Age : "<<*ageptr<<" Years"<<endl;
          cout<<"Salary : Rs."<<*salaryptr<<endl;
          cout<<"Research Area : "<<*ResearchAreaptr<<endl;
      }
};

int main()
{
    gradstudent g1("faseeh ur rehman",8,18,"Quantum Mechanics");
    g1.getInfo();
    
    TA t1("Tehseen",26,450000,"Machine Learning");
    t1.getInfo();
    return 0;
}
